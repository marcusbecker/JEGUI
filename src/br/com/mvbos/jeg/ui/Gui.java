/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.mvbos.jeg.ui;

import br.com.mvbos.jeg.element.ElementMovableModel;
import br.com.mvbos.jeg.engine.Engine;
import br.com.mvbos.jeg.engine.GameEngineModel;
import br.com.mvbos.jeg.scene.IScene;
import br.com.mvbos.jeg.scene.impl.SceneDefault;
import br.com.mvbos.jeg.window.IWindowGame;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import javax.swing.JPanel;

/**
 *
 * @author mbecker
 */
public class Gui extends javax.swing.JFrame {

    private static final int FPS = 20;
    private static final int UPS = 30;

    private BufferedImage buffer;
    private int w = 928;
    private int h = 696;

    private static IScene scene;

    private boolean freeze = true;

    private final GameEngineModel gem = new GameEngineModel(0);

    private IWindowGame wg;

    public Gui() {
        initComponents();

        buffer = new BufferedImage(w, h, BufferedImage.TYPE_INT_RGB);

        wg = new IWindowGame() {

            @Override
            public void changeScene(IScene scene) {
                if (Gui.scene != null) {
                    Gui.scene.changeSceneEvent();
                }

                Gui.scene = scene;
                freeze = !scene.startScene();
            }

            @Override
            public void freeze(boolean b, int option) {
                freeze = b;
            }

            @Override
            public void startConfig() {
                Engine.window = this;
            }

            @Override
            public void startGame() {
                gem.fill(this, FPS, UPS);
                gem.start();
            }

            @Override
            public void resumeGame() {
                // TODO Auto-generated method stub

            }

            @Override
            public void updateGame() {
                if (!freeze && scene != null) {
                    scene.update();
                }
            }

            @Override
            public void drawGame() {
                if (freeze) {
                    return;
                }

                Graphics2D g2d = buffer.createGraphics();

                if (scene != null) {
                    // clear
                    g2d.setColor(scene.getBgColor());
                    g2d.fillRect(0, 0, getWidth(), getHeight());

                    scene.drawElements(g2d);

                    pnCanvas.repaint();
                }

                g2d.dispose();
            }

            @Override
            public void engineNotification(int id) {
                // TODO Auto-generated method stub

            }

            @Override
            public int getWindowWidth() {
                return w;
            }

            @Override
            public int getWindowHeight() {
                return h;
            }

            @Override
            public int getCanvasWidth() {
                return pnCanvas.getWidth();
            }

            @Override
            public int getCanvasHeight() {
                return pnCanvas.getHeight();
            }

            @Override
            public void selectMovableElement(ElementMovableModel e) {
                // TODO Auto-generated method stub

            }

            @Override
            public ElementMovableModel getMovableElement() {
                // TODO Auto-generated method stub
                return null;
            }
        };

        Engine.window = wg;
        wg.changeScene(new SceneDefault());
        gem.fill(wg, FPS, UPS);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        pnMenu = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        treeElements = new javax.swing.JTree();
        cbScenes = new javax.swing.JComboBox();
        pnCanvas =     new JPanel() {
            private static final long serialVersionUID = 1L;

            @Override
            public void paintComponent(Graphics g) {
                g.drawImage(buffer, 0, 0, null);
            }
        };
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        pnMenu.setBackground(new java.awt.Color(153, 153, 153));

        jScrollPane1.setViewportView(treeElements);

        cbScenes.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        javax.swing.GroupLayout pnMenuLayout = new javax.swing.GroupLayout(pnMenu);
        pnMenu.setLayout(pnMenuLayout);
        pnMenuLayout.setHorizontalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 252, Short.MAX_VALUE)
            .addComponent(cbScenes, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        pnMenuLayout.setVerticalGroup(
            pnMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnMenuLayout.createSequentialGroup()
                .addComponent(cbScenes, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 159, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(285, Short.MAX_VALUE))
        );

        splitPane.setRightComponent(pnMenu);

        pnCanvas.setBackground(new java.awt.Color(153, 204, 255));

        javax.swing.GroupLayout pnCanvasLayout = new javax.swing.GroupLayout(pnCanvas);
        pnCanvas.setLayout(pnCanvasLayout);
        pnCanvasLayout.setHorizontalGroup(
            pnCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );
        pnCanvasLayout.setVerticalGroup(
            pnCanvasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        splitPane.setLeftComponent(pnCanvas);

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Game");

        jMenuItem1.setText("Run");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuItem3.setText("Pause");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem3);

        jMenuItem2.setText("Stop");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem2);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(splitPane, javax.swing.GroupLayout.Alignment.TRAILING)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        gem.start();
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        gem.pause();
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        gem.stop();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox cbScenes;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnCanvas;
    private javax.swing.JPanel pnMenu;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JTree treeElements;
    // End of variables declaration//GEN-END:variables
}
